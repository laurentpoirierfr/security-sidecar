worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name localhost;

        # Route publique
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # Proxy public
        location /ops {
            proxy_pass http://${FORWARD_HOST}:${FORWARD_PORT}/ops;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Configuration OAuth2 avec Keycloak
        auth_request /_oauth2_token_introspection;
        
        location = /_oauth2_token_introspection {
            internal;
            proxy_pass ${OIDC_TOKEN_INTROSPECTION_URL};
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Content-Type "application/x-www-form-urlencoded";
            proxy_set_header Authorization "Basic ${KEYCLOAK_CLIENT_CREDENTIALS}";
            proxy_set_header X-Access-Token $http_authorization;
        }

        error_page 401 = @error401;
        
        location @error401 {
            return 302 ${OIDC_AUTH_URL}
              client_id=${KEYCLOAK_CLIENT_ID}&
              redirect_uri=http://$host$request_uri&
              response_type=code&
              scope=openid;
        }

        # Application sécurisée
        location /ui {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /ui/index.html;
            auth_request_set $user $upstream_http_x_auth_user;
            proxy_set_header X-User $user;
        }

        # API sécurisée
        location /api {
            proxy_pass http://${FORWARD_HOST}:${FORWARD_PORT}/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            auth_request_set $token $http_authorization;
            proxy_set_header Authorization $token;
        }

        # Logout
        location /logout {
            return 302 ${OIDC_LOGOUT_URL};
        }
    }
}